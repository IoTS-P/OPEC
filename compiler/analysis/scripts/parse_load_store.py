#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

import os
import sys
import argparse
import logging
import traceback
import re
import json
import copy
import pprint
import networkx as nx

import PeripheralDef
import FindFunctions
# import PTAParser
import DependencyParser
import SVFAnderParser
import oi_utils
import OperationGenerator

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


couple_peripheral = {
    # first peripheral name: second peripheral start_addr
    "DSI-Host": 0x40017000
}


def peripheral_update(operation, gv_to_peripheral):
    logger.info("Start to replace GVs which are peripheral actually...")
    for cur_op in operation.keys():
        GV_set = copy.deepcopy(operation[cur_op]["ExternalData"])
        for gv in GV_set:
            if gv in gv_to_peripheral.keys():
                for peripheral in gv_to_peripheral[gv]:
                    operation[cur_op]["Peripherals"].add(PeripheralDef.get_peripherals_name(peripheral))
                    # if gv == "UartHandle" or gv == "hltdc_eval":
                    #     operation[cur_op]["Peripherals"].add(PeripheralDef.get_peripherals_name(peripheral))
                    # else:
                    #     operation[cur_op]["ExternalData"].remove(gv)    # in .rodata
                    #     operation[cur_op]["Peripherals"].add(PeripheralDef.get_peripherals_name(peripheral))

        operation[cur_op]["InternalData"] = list(operation[cur_op]["InternalData"])
        operation[cur_op]["ExternalData"] = list(operation[cur_op]["ExternalData"])
        operation[cur_op]["Peripherals"] = list(operation[cur_op]["Peripherals"])
        # operation[cur_op]["Whitelist"] = list(operation[cur_op]["Whitelist"])
        operation[cur_op]["Whitelist_Namelist"] = list(operation[cur_op]["Whitelist_Namelist"])
    logger.info("Finish replacing!")
    return operation


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--app_name', dest='APP_NAME', default="Camera", help='The app Name')
    parser.add_argument('-b', '--build_dir', dest='Build_Dir_PATH', default="/home/zhouxia/OI_project/stm32f469I/Camera_To_USBDisk/SW4STM32/STM32469I_EVAL/build9/", help="The PATH to the APP build directory, default build9")
    args = parser.parse_args()
    
    gv_to_peripheral_json_file = args.Build_Dir_PATH + "gv_2_peripheral.json"

    entry_funcs_file        = args.Build_Dir_PATH + "Entry_functions.json"
    # ander_funcptr.json were generated from ander_funcptr.txt
    svf_ander_funptr_file   = args.Build_Dir_PATH + "ander_funcptr.txt"
    svf_ander_funptr_json   = args.Build_Dir_PATH + "ander_funcptr.json"
    # these two json files are generated in ${ROOT}/compiler/analysis/def_use/OIApplication.cpp
    address_taken_file      = args.Build_Dir_PATH + "address_taken_funcs.json"
    type_base_file          = args.Build_Dir_PATH + "type_based_analysis_results.json"
    address_taken_pruned_edges_file     = args.Build_Dir_PATH + "address_taken_pruned_edges.json"
    type_base_pruned_edges_file         = args.Build_Dir_PATH + "type_based_pruned_edges.json"
    pruned_ander_file       = args.Build_Dir_PATH + "pruned_ander.json"
    # callgraph_fortmat.dot were formatted from callgraph_final.dot generated by wpa
    callgraph_file          = args.Build_Dir_PATH + "callgraph_format.dot"
    callgraph_file_at       = args.Build_Dir_PATH + "callgraph_at.dot"
    callgraph_file_type     = args.Build_Dir_PATH + "callgraph_type.dot"
    callgraph_full_file     = args.Build_Dir_PATH + "callgraph_full.dot"
    defuse_file             = args.Build_Dir_PATH + args.APP_NAME + "_def_use.output"
    ro_gv_file              = args.Build_Dir_PATH + "ro_gv.json"
    rw_gv_file              = args.Build_Dir_PATH + "rw_gv.json"
    all_gv_file             = args.Build_Dir_PATH + "all_gv.json"
    all_gv_with_size_file   = args.Build_Dir_PATH + "all_gv_size.json"
    dvf_results_file        = args.Build_Dir_PATH + "dvf_results.json"
    # supa_pts_file           = args.Build_Dir_PATH + args.APP_NAME + ".pts"
    # parsed_pts_file         = args.Build_Dir_PATH + args.APP_NAME + "_parsed_pts.json"
    init_policy_file        = args.Build_Dir_PATH + args.APP_NAME + "_init_policy.json"
    final_policy_bf_peripheral_list_file       = args.Build_Dir_PATH + args.APP_NAME + "_final_bf_peirpheral_list_policy.json"
    final_policy_file       = args.Build_Dir_PATH + args.APP_NAME + "_final_policy.json"
    # intermidiate results
    operation_subfunc_file                      = args.Build_Dir_PATH + args.APP_NAME + "_operation_subfunc.json"
    func_peripheral_dependecny                  = args.Build_Dir_PATH + "function_peripheral_dependency.json"
    func_memdep_gv_file                         = args.Build_Dir_PATH + "func_memdep_gv.json"
    func_memdep_gv_peri_file                    = args.Build_Dir_PATH + "func_memdep_gv_peri.json"
    func_memdep_gv_peri_ptr_file                = args.Build_Dir_PATH + "func_memdep_gv_peri_ptr.json"
    func_memdep_gv_peri_ptr_bf_operation_file   = args.Build_Dir_PATH + "func_memdep_gv_peri_ptr_bf_operation.json"
    operation_bf_update_peri_file               = args.Build_Dir_PATH + "operation_bf_update_peri.json"
    memory_pool_file                            = args.Build_Dir_PATH + "memory_pool.json"
    memory_pool_aligned_file                    = args.Build_Dir_PATH + "memory_pool_aligned.json"

    # prune indirect call edges
    ## parse SVF andersen point-to analysis results
    logger.info("[*] Start to parse the SVF Andersen pointer analysis results")
    ander_json = SVFAnderParser.parse_svf_ander(svf_ander_funptr_file, svf_ander_funptr_json)
    ander_json = SVFAnderParser.deduplicate_targets(ander_json)
    at_json = oi_utils.load_json_from_file(address_taken_file)
    logger.info("[*] Finish parsing the SVF Andersen pointer analysis results")

    ## pruning indirect function pointers via address-taken function list
    logger.info("[*] Start to pruning wpa function pointer analysis results via address-taken pruning")
    ander_json, address_taken_diff = SVFAnderParser.address_taken_pruning(ander_json, at_json)
    ### dump pruned edges to file
    oi_utils.store_json_to_file(address_taken_diff, address_taken_pruned_edges_file)
    callgraph_dot = oi_utils.load_graph_from_file(callgraph_file)
    callgraph = FindFunctions.callgraph_edge_pruning(callgraph_dot, address_taken_diff)
    logger.info("[*] Finish pruning wpa function pointer analysis results via address-taken pruning")

    ## pruning indirect function pointers via type-based function list
    logger.info("[*] Start to pruning wpa function pointer analysis results via type pruning")
    type_json = oi_utils.load_json_from_file(type_base_file)
    ander_json, type_based_diff = SVFAnderParser.type_pruning(ander_json, type_json)
    ### dump pruned edges to file
    oi_utils.store_json_to_file(type_based_diff, type_base_pruned_edges_file)
    callgraph = FindFunctions.callgraph_edge_pruning(callgraph, type_based_diff)
    oi_utils.store_json_to_file(ander_json, pruned_ander_file)
    logger.info("[*] Finish pruning wpa function pointer analysis results via type pruning")

    ## solve unsolved function pointers
    logger.info("[*] Start to solve unsovled indirect calls\n")
    callgraph = FindFunctions.solve_unsolved_indirect_calls(callgraph, ander_json, type_json, at_json)
    oi_utils.store_graph_to_file(callgraph, callgraph_full_file)
    logger.info("[*] Finish solving unsovled indirect calls\n")


    # generate operation
    ## get all functions that are reachable in an operation
    entry_info = oi_utils.load_json_from_file(entry_funcs_file)
    tmp = sys.stdout
    # with open(args.Build_Dir_PATH+args.APP_NAME+"_subfunc_debug.log", "w") as f_subfunc_debug:
    #     sys.stdout = f_subfunc_debug
    operation_funcs = FindFunctions.get_operation_subfuncs(entry_info, callgraph)
    # sys.stdout = tmp
    oi_utils.store_json_to_file(operation_funcs, operation_subfunc_file)
    logger.warning("Dumping Operation Sub-functions")

    ## add def-use gv analysis results
    func_memdep = {}
    func_memdep = DependencyParser.parse_defuse(func_memdep, defuse_file)
    oi_utils.store_json_to_file(func_memdep, func_memdep_gv_file)

    ## add peripehral access results
    logger.info("Start to parse peripheral dependency from def_use file...")
    # func_memdep = DependencyParser.parse_peripheral(defuse_file, func_memdep)
    func_peripheral_json = oi_utils.load_json_from_file(func_peripheral_dependecny)
    func_memdep = DependencyParser.add_peripheral_dependency(func_peripheral_json, func_memdep)

    logger.info("Finish parsing peripheral dependency from def_use file!")
    oi_utils.store_json_to_file(func_memdep, func_memdep_gv_peri_file)

    ## get all used global variables
    global_var_dict_wth_size_fields = oi_utils.load_json_from_file(all_gv_file)
    # global_var_dict_wth_size_fields = DependencyParser.parse_global_variables(defuse_file)

    ## parse points-to anlaysis results, compare point-to object to global variable list
    # logger.info("Start to parse SVF Points-to analysis results...")
    # PTAParser.parse_pts(supa_pts_file, global_var_dict_wth_size_fields, parsed_pts_file)
    # logger.info("Finish parsing SVF Points-to analysis results and save it to file!")
    # logger.info("Start to load SVF Points-to analysis results...")
    # pts_data = oi_utils.load_json_from_file(parsed_pts_file)
    # logger.info("Finish loading SVF Points-to analysis results!")


    data_pointer_json = oi_utils.load_json_from_file(dvf_results_file)
    func_memdep = DependencyParser.add_data_pointer_results(func_memdep, data_pointer_json)
    oi_utils.store_json_to_file(func_memdep, func_memdep_gv_peri_ptr_file)
    ## check variable
    func_memdep = DependencyParser.check_variable(func_memdep, global_var_dict_wth_size_fields)
    ## remove constant global data
    ro_data_json = oi_utils.load_json_from_file(ro_gv_file)
    func_memdep = DependencyParser.remove_constant_data(func_memdep, ro_data_json)
    oi_utils.store_json_to_file(func_memdep, func_memdep_gv_peri_ptr_bf_operation_file)

    ## generate operation
    operation = OperationGenerator.merge_funcs_to_operation(func_memdep, operation_funcs)
    oi_utils.store_json_to_file(operation, operation_bf_update_peri_file)
    gv_to_peripheral = oi_utils.load_json_from_file(gv_to_peripheral_json_file)
    for _gv, _peris in gv_to_peripheral.items():
        peris = []
        for p in _peris:
            peris.append(int(p, 16))
        gv_to_peripheral[_gv] = peris

    operation = peripheral_update(operation, gv_to_peripheral)
    operation = OperationGenerator.add_default_operation(operation)
    operation = OperationGenerator.add_none_whitelist(operation)

    ## memory heap & memory pool
    operation = OperationGenerator.initialize_memory_pool(operation)
    ### process memory pool info
    memory_pools_info = oi_utils.load_json_from_file(memory_pool_file)
    if memory_pools_info == None:
        memory_pools_info = {}
    memory_pool_vars_list = OperationGenerator.get_memory_pool_vars_list(memory_pools_info)
    #### calculate aligned size
    memory_pools_info = OperationGenerator.calc_aligned_size_for_memory_pool(memory_pools_info)
    ### replace global variables which are memory pool variables with memory pool info
    operation = OperationGenerator.replace_memory_pool_vars(operation, memory_pool_vars_list, memory_pools_info)


    ## generate initial policy
    init_policy = OperationGenerator.generate_init_policy(entry_info, operation, memory_pools_info)
    oi_utils.store_json_to_file(memory_pools_info, memory_pool_aligned_file)
    

    ## add couple peripherals (one peripheral range split two)
    init_policy = DependencyParser.add_couple_peripheral(init_policy, couple_peripheral)

    oi_utils.store_json_to_file(init_policy, init_policy_file)

    final_policy = OperationGenerator.merge_adjacent_peripherals(init_policy)
    final_policy = OperationGenerator.sort_external_global_data(final_policy, global_var_dict_wth_size_fields)
    final_policy = OperationGenerator.init_sanitization_info(final_policy)
    oi_utils.store_json_to_file(final_policy, final_policy_bf_peripheral_list_file)

    # final_policy = OperationGenerator.generate_peripheral_whitelist(final_policy)
    final_policy = OperationGenerator.generate_peripheral_namelist(final_policy)
    oi_utils.store_json_to_file(final_policy, final_policy_file)

    logger.info("Finish dumping operation without no-sharing variables!")